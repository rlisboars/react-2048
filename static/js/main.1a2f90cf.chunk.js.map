{"version":3,"sources":["utils.js","components/Scoreboard.js","components/Tile.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["randomStart","board","randomPosition1","Math","floor","random","randomPosition2","randomTiles","position1","tile1","position2","tile2","sumTiles","tiles","key","_filteredColumn","filteredColumn","filter","x","movementScore","i","reverse","length","splice","unshift","apply","Object","toConsumableArray","Array","fill","LOCALSTORAGEKEY","StyledBoard","styled","div","_templateObject","Score","_templateObject2","Title","_templateObject3","Mission","_templateObject4","Scoreboard","props","storedHighScore","localStorage","getItem","score","_useState","useState","_useState2","slicedToArray","highScore","setHighScore","setItem","react_default","a","createElement","parseInt","BounceAnimation","keyframes","Tile_templateObject","StyledTile","Tile_templateObject3","animate","css","Tile_templateObject2","Tile","prevScore","value","ref","useRef","useEffect","current","usePrevious","Board_templateObject","Message","h1","Board_templateObject2","Button","button","Board_templateObject3","Canvas","Board_templateObject4","Board","setScore","_useState3","_useState4","lastScore","setLastScore","initialTiles","initialBoard","_useState5","_useState6","setBoard","boardRef","focus","components_Scoreboard","onClick","tabIndex","onKeyDown","e","newBoard","slice","moved","_loop","c","_sumTiles","map","_sumTiles2","summedTiles","mvScore","l","_sumTiles3","_sumTiles4","newTile","emptyPositions","line","idxLine","tile","idxColumn","push","randomPosition","randomTile","position","tileBellow","tileRight","checkIfPlayerHadLost","keyPressed","Board_StyledBoard","lineIdx","tileValue","colIdx","components_Tile","concat","App_templateObject","App","document","title","App_StyledBoard","components_Board","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a2f90cf.chunk.js","sourcesContent":["export function randomStart(board) {\r\n  const randomPosition1 = [Math.floor(Math.random() * 4) + 0, Math.floor(Math.random() * 3) + 0]\r\n  let randomPosition2 = [Math.floor(Math.random() * 4) + 0, Math.floor(Math.random() * 3) + 0]\r\n  while (randomPosition2 === randomPosition1) {\r\n    randomPosition2 = [Math.floor(Math.random() * 4) + 0, Math.floor(Math.random() * 3) + 0]\r\n  }\r\n  const randomTiles = [(Math.floor(Math.random() * 2) + 1) * 2, (Math.floor(Math.random() * 2) + 1) * 2]\r\n  return  {\r\n    position1: randomPosition1,\r\n    tile1: randomTiles[0],\r\n    position2: randomPosition2,\r\n    tile2: randomTiles[1]\r\n  }\r\n}\r\n\r\nexport function randomTile(board) {\r\n  let emptyPositions = []\r\n  board.map((line, idxLine) => {\r\n    return line.map((tile, idxColumn) => {\r\n      if (tile === 0) emptyPositions.push([idxLine, idxColumn])\r\n    })\r\n  })\r\n  let randomPosition = Math.floor(Math.random() * emptyPositions.length) + 0\r\n  const randomTile = (Math.floor(Math.random() * 2) + 1) * 2\r\n\r\n  return {\r\n    position: emptyPositions.length > 0 ? emptyPositions[randomPosition] : false,\r\n    tile: randomTile\r\n  }\r\n}\r\n\r\nexport function sumTiles(tiles, key) {\r\n  let filteredColumn = tiles.filter(x => x !== 0)\r\n  let movementScore = 0\r\n  filteredColumn = key === \"ArrowLeft\" || key === \"ArrowUp\" ? filteredColumn.reverse() : filteredColumn\r\n  for (let i = filteredColumn.length - 1; i > 0; i--) {\r\n    if (filteredColumn[i] === 0 && i - 1 >= 0) {\r\n      filteredColumn[i] = filteredColumn[i - 1]\r\n      filteredColumn.splice(i - 1, 1)\r\n    }\r\n    if (filteredColumn[i] === filteredColumn[i - 1]) {\r\n      filteredColumn[i] += filteredColumn[i - 1]\r\n      movementScore += filteredColumn[i]\r\n      filteredColumn.splice(i - 1, 1)\r\n    }\r\n  }\r\n  filteredColumn.unshift(...Array(4 - filteredColumn.length).fill(0))\r\n  filteredColumn = key === \"ArrowLeft\" || key === \"ArrowUp\" ? filteredColumn.reverse() : filteredColumn\r\n  return [ filteredColumn, movementScore ]\r\n}\r\n\r\nexport function checkIfPlayerHadLost(board) {\r\n  for (let l = 0; l < board.length - 1; l++) {\r\n    for (let c = 0; c < board.length; c++) {\r\n      const tile = board[l][c]\r\n      const tileBellow = board[l+1][c]\r\n      const tileRight = c === board.length - 1 ? null : board[l][c+1]\r\n      if (tile === 0) return false\r\n      if (tile === tileBellow || tile === tileRight) return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst LOCALSTORAGEKEY = \"R34CT2048\"\r\n\r\nconst StyledBoard = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-rows: 80px 40px;\r\n  column-gap: 10px;\r\n  width: 410px;\r\n  height: 120px;\r\n  margin: 0 auto;\r\n  font-family: \"Clear Sans\", \"Helvetica Neue\", Arial, sans-serif;\r\n`\r\n\r\nconst Score = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 1fr 2fr;\r\n  border-radius: 4px;\r\n  background: #b4b6c2;\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: 25px;\r\n  text-align: center;\r\n`\r\n\r\nconst Title = styled.div`\r\n  color: white;\r\n  text-align: center;\r\n  line-height: 40px;\r\n  font-weight: bold;\r\n  font-size: 15px;\r\n`\r\n\r\nconst Mission = styled.div`\r\n  color: #b4b6c2;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  grid-column-start: 1;\r\n  grid-column-end: 3;\r\n  text-align: center;\r\n  line-height: 40px;\r\n`\r\n\r\nfunction Scoreboard(props) {\r\n  \r\n  let storedHighScore = localStorage.getItem(LOCALSTORAGEKEY)\r\n  const score = props.score\r\n  const [ highScore, setHighScore ] = useState(storedHighScore ? storedHighScore : 0)\r\n\r\n  if (score > storedHighScore) {\r\n    localStorage.setItem(LOCALSTORAGEKEY, score)\r\n    setHighScore(score)\r\n  }\r\n\r\n  return (\r\n    <StyledBoard>\r\n      <Score>\r\n        <Title>PONTUAÇÃO</Title>\r\n        {props.score}\r\n      </Score>\r\n      <Score>\r\n        <Title>MELHOR</Title>\r\n        {highScore}\r\n      </Score>\r\n      <Mission>O seu próximo objetivo é chegar ao número {parseInt(highScore) + 4}</Mission>\r\n    </StyledBoard>\r\n  )\r\n\r\n}\r\n\r\nexport default Scoreboard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled, { css, keyframes } from 'styled-components'\r\n\r\nconst BounceAnimation = keyframes`\r\n  0% { width: 90px; height: 90px; }\r\n  50% { width: 95px; height: 95px; }\r\n  100% { width: 90px; height: 90px; }\r\n`\r\n\r\nconst animation = props => {\r\n  if (props.animate) {\r\n    return css`\r\n      ${BounceAnimation} 0.5s linear;\r\n    `\r\n  }\r\n}\r\n\r\nconst StyledTile = styled.div`\r\n  border-radius: 4px;\r\n  width: 90px;\r\n  height: 90px;\r\n  margin: 10px 0 0 10px;\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: ${ props => {\r\n    switch (props.score) {\r\n      case 128:\r\n      case 256:\r\n      case 512:\r\n        return \"40px\"\r\n      case 1024:\r\n      case 2048:\r\n        return \"35px\"\r\n      case \"higher\":\r\n        return \"30px\"\r\n      default:\r\n        return \"45px\"\r\n    }\r\n  }};\r\n  animation: ${animation};\r\n  text-align: center;\r\n  line-height: 100px;\r\n  background: ${ props => {\r\n    switch (props.score) {\r\n      case 2:\r\n        return \"#485d68\"\r\n      case 4:\r\n        return \"#2ca796\"\r\n      case 8:\r\n        return \"#8e4c0c\"\r\n      case 16:\r\n        return \"#ac1d7f\"\r\n      case 32:\r\n        return \"#ffc605\"\r\n      case 64:\r\n        return \"#009dcd\"\r\n      case 128:\r\n        return \"#007541\"\r\n      case 256:\r\n        return \"#ff5500\"\r\n      case 512:\r\n        return \"#bfcc09\"\r\n      case 1024:\r\n        return \"#003669\"\r\n      case 2048:\r\n      case \"higher\":\r\n        return \"#f42c59\"\r\n      default:\r\n        return \"rgba(255,255,255,0.35)\"\r\n    }\r\n  }}\r\n`\r\n\r\nfunction Tile(props) {\r\n  const score = props.score\r\n  const prevScore = usePrevious(score)\r\n    \r\n  return (\r\n    <StyledTile score={score} animate={ prevScore !== score && score !== 0}>{ score !== 0 ? score : \"\"}</StyledTile>\r\n  )\r\n\r\n  function usePrevious(value) {\r\n    const ref = useRef()\r\n    useEffect(() => {\r\n      ref.current = value\r\n    })\r\n    return ref.current\r\n  }\r\n}\r\n\r\nexport default Tile","import React, { useState, useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { randomTile, sumTiles, checkIfPlayerHadLost, randomStart } from '../utils'\r\nimport Scoreboard from './Scoreboard'\r\nimport Tile from './Tile'\r\n\r\nconst StyledBoard = styled.div`\r\n  display: grid;\r\n  grid-template: repeat(4, 100px) / repeat(4, 100px);\r\n  height: 410px;\r\n  background: #b4b6c2;\r\n  border-radius: 4px;\r\n`\r\nconst Message = styled.h1`\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  color: black;\r\n  text-align: center;\r\n`\r\n\r\nconst Button = styled.button`\r\n  display: block;\r\n  margin: 0 auto;\r\n  height: 50px;\r\n  width: 300px;\r\n  font-size: 20px;\r\n  background-color: white;\r\n  border: 0;\r\n  color: #ac1d7f;\r\n  &:hover {\r\n    background-color: #ac1d7f;\r\n    color: white;\r\n  }\r\n`\r\n\r\nconst Canvas = styled.div`\r\n  &:focus {\r\n    outline: none\r\n  }\r\n`\r\n\r\nfunction Board(props) {\r\n  const [score, setScore] = useState(-2)\r\n  const [lastScore, setLastScore] = useState(0)\r\n\r\n  const initialTiles = props.initialTiles\r\n  const initialBoard = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]\r\n  initialBoard[initialTiles.position1[0]][initialTiles.position1[1]] = initialTiles.tile1\r\n  initialBoard[initialTiles.position2[0]][initialTiles.position2[1]] = initialTiles.tile2\r\n  \r\n  const [board, setBoard] = useState(initialBoard)\r\n  const boardRef = useRef()\r\n\r\n  useEffect(() => {\r\n    if (score >= 0) {\r\n      boardRef.current.focus()\r\n    }\r\n  })\r\n  \r\n  return (\r\n      <div>\r\n      { score < 0 && \r\n        <div>\r\n          <Scoreboard score={lastScore}/>\r\n          <Message>{ score === -1 ? 'Você perdeu!' : ''}</Message>\r\n          <Button onClick={startGame}>{ score === -1 ? 'Reiniciar' : 'Começar' }</Button>\r\n        </div>\r\n      }\r\n      { score >= 0 && \r\n        <Canvas ref={boardRef} tabIndex=\"1\" onKeyDown={e => setBoard(keyPressed(e, board))}>\r\n          <Scoreboard score={score}/>\r\n          <StyledBoard>\r\n            {\r\n              board.map((tile, lineIdx) => {\r\n                return tile.map((tileValue, colIdx) => {\r\n                  return <Tile score={tileValue} key={`${lineIdx}${colIdx}`}/>\r\n                })\r\n              })\r\n            }\r\n          </StyledBoard>\r\n        </Canvas>\r\n      }\r\n      </div>\r\n  )\r\n\r\n  function keyPressed(e, board) {\r\n    let newBoard = board.slice()\r\n    let moved = false\r\n    let movementScore = 0\r\n    switch (e.key) {\r\n      case \"ArrowDown\":\r\n      case \"ArrowUp\":\r\n        for (let c = 0; c < board.length; c++) {\r\n          let [ summedTiles, mvScore ] = sumTiles(newBoard.map(x => x[c]), e.key)\r\n          movementScore += mvScore\r\n          moved = summedTiles !== newBoard.map(x => x[c])\r\n          for (let i = 0; i < summedTiles.length; i++) {\r\n            newBoard[i][c] = summedTiles[i]\r\n          }\r\n          setScore(score + movementScore)\r\n        } \r\n        break;\r\n      case \"ArrowRight\":\r\n      case \"ArrowLeft\":\r\n        for (let l = 0; l < board.length; l++) {\r\n          let [ summedTiles, mvScore ] = sumTiles(newBoard[l], e.key)\r\n          movementScore += mvScore\r\n          moved = summedTiles !== newBoard[l]\r\n          for (let i = 0; i < summedTiles.length; i++) {\r\n            newBoard[l][i] = summedTiles[i]\r\n          }\r\n          setScore(score + movementScore)\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    \r\n    if (moved) {\r\n      const newTile = randomTile(newBoard)\r\n      if (newTile.position) newBoard[newTile.position[0]][newTile.position[1]] = newTile.tile\r\n      if (checkIfPlayerHadLost(newBoard)) {\r\n        setLastScore(score)\r\n        setScore(-1)\r\n      }\r\n    }\r\n    return newBoard\r\n  }\r\n\r\n  function startGame() {\r\n    const initialTiles = randomStart()\r\n    const initialBoard = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]\r\n    initialBoard[initialTiles.position1[0]][initialTiles.position1[1]] = initialTiles.tile1\r\n    initialBoard[initialTiles.position2[0]][initialTiles.position2[1]] = initialTiles.tile2\r\n    setBoard(initialBoard)\r\n    setScore(0)\r\n  }\r\n}\r\n\r\nexport default Board\r\n","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport Board from './components/Board'\r\nimport { randomStart } from './utils'\r\n\r\nconst initialTiles = randomStart()\r\n\r\nconst StyledBoard = styled.div`\r\n  width: 410px;\r\n  margin: 0 auto;\r\n  font-family: \"Clear Sans\", \"Helvetica Neue\", Arial, sans-serif;\r\n`\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    document.title = \"React 2048\"\r\n  }\r\n  render() {\r\n    return (\r\n      <StyledBoard>\r\n        <Board initialTiles={initialTiles}/>\r\n      </StyledBoard>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}